/////////////////////////////////////////////////////////////
// strings.cpp
//
// This file was generated by CXR, the literal string encryptor.
// CXR, Copyright 2002, Smaller Animals Software, Inc., all rights reserved.
//
// Please do not edit this file. Any changes here will be overwritten on the next compile.
// If you wish to make changes to a string, please edit:
//     c:\Ogoid++\misc\strings.i
//

/////////////////////////////////////////////////////////////

#include <assert.h>
#include <string>
using namespace std;
#include "cxr_inc.h"

typedef unsigned __int8 BYTE;



























//this file will be processed with a custom build rule (see it's proprieties):
// first it will be preprocessed with the default cl.exe, only after with cxr.exe.
// the result will be strings.cpp (the result from the preprocessor, a file called
// strings.i, will be deleted).


// the global objects
///////////////////////////
#ifdef _USING_CXR
const char* estr_class_manager		= "\x82\x8e\x89\x8d\x83\x8e\x8a\x88\x80\x8b\x81\x88\x86\x8d\x8c\x86\x8d\x8b\x80\x8a\x8e\x8a\x85\x88\x81\x8e";
#else
const char* estr_class_manager		= _CXR("ClassManager");
#endif

///////////////////////////
#ifdef _USING_CXR
const char* estr_physics_system		= "\x86\x83\x85\x82\x8c\x85\x8e\x87\x81\x83\x8e\x8a\x85\x85\x80\x84\x8d\x82\x85\x8f\x85\x81\x82\x88\x82\x83\x85\x88\x84\x8f\x85\x85\x86\x82\x80\x8b\x80\x8d";
#else
const char* estr_physics_system		= _CXR("BasicPhysicsSystem");
#endif

///////////////////////////
#ifdef _USING_CXR
const char* estr_inputdevice_manager= "\x86\x8a\x80\x8c\x8a\x8b\x8b\x8a\x84\x8c\x81\x8d\x86\x83\x8e\x81\x8e\x84\x89\x82\x88\x87\x82\x8d\x83\x87\x88\x84\x8f\x8e\x85\x83\x8c\x87\x83\x87\x80\x8f";
#else
const char* estr_inputdevice_manager= _CXR("InputDeviceManager");
#endif

///////////////////////////
#ifdef _USING_CXR
const char* estr_controlmap_manager	= "\x89\x8f\x87\x84\x89\x8c\x87\x80\x88\x87\x8d\x84\x89\x8d\x87\x86\x83\x8c\x8f\x82\x82\x84\x88\x86\x8a\x85\x87\x8e\x87\x83\x83\x80\x8e\x8c\x89\x81";
#else
const char* estr_controlmap_manager	= _CXR("ControlMapManager");
#endif

///////////////////////////
#ifdef _USING_CXR
const char* estr_object_manager		= "\x8d\x80\x87\x81\x89\x8e\x8a\x8f\x87\x81\x8a\x85\x86\x89\x8b\x80\x89\x81\x85\x8b\x8f\x82\x8c\x8d\x8c\x80\x83\x8e";
#else
const char* estr_object_manager		= _CXR("ObjectManager");
#endif

///////////////////////////
#ifdef _USING_CXR
const char* estr_template_manager	= "\x8e\x8e\x8f\x88\x8d\x88\x88\x84\x87\x8b\x82\x87\x8d\x89\x8f\x86\x85\x84\x86\x87\x8b\x89\x82\x80\x8c\x87\x83\x8a\x88\x8f\x8b\x84\x8d\x85\x83\x89\x82\x83\x87\x89\x81\x88\x87\x83";
#else
const char* estr_template_manager	= _CXR("ObjectTemplateManager");
#endif

///////////////////////////
#ifdef _USING_CXR
const char* estr_player_manager		= "\x8f\x83\x87\x84\x86\x8e\x8d\x8f\x84\x81\x85\x88\x84\x85\x83\x86\x81\x8a\x87\x8d\x83\x8e\x87\x85\x88\x81\x8f\x89";
#else
const char* estr_player_manager		= _CXR("PlayerManager");
#endif

///////////////////////////
#ifdef _USING_CXR
const char* estr_hud_manager		= "\x86\x84\x8d\x89\x8b\x8c\x81\x8b\x8d\x83\x89\x8a\x86\x86\x8c\x80\x81\x84\x81\x85\x8c\x86";
#else
const char* estr_hud_manager		= _CXR("HudManager");
#endif

///////////////////////////
#ifdef _USING_CXR
const char* estr_renderer			= "\x83\x81\x88\x8d\x8b\x8f\x84\x86\x88\x81\x8e\x8e\x80\x8c\x85\x8e\x80\x8c";
#else
const char* estr_renderer			= _CXR("Renderer");
#endif

///////////////////////////
#ifdef _USING_CXR
const char* estr_postproduction		= "\x8e\x8f\x88\x82\x86\x83\x83\x82\x87\x81\x87\x88\x8a\x84\x8a\x84\x8a\x81\x85\x8c\x85\x87\x8b\x87\x83\x8f\x80\x8b\x8b\x87\x8a\x81\x81\x80\x81\x84\x8f\x8a\x87\x8e\x89\x8f\x82\x8a\x81\x8c\x8f\x8f";
#else
const char* estr_postproduction		= _CXR("PostProductionFrameWork");
#endif

///////////////////////////
#ifdef _USING_CXR
const char* estr_nametag_manager	= "\x85\x88\x84\x8d\x8b\x8b\x82\x87\x8b\x8b\x82\x8b\x82\x82\x8e\x89\x8a\x83\x83\x87\x89\x84\x8e\x87\x87\x81\x8c\x88\x85\x8a";
#else
const char* estr_nametag_manager	= _CXR("NametagManager");
#endif




// the cheats names
///////////////////////////
#ifdef _USING_CXR
const char* estr_minimap			= "\x82\x8e\x89\x83\x85\x8f\x8a\x83\x80\x89\x8b\x81\x88\x83\x8c\x8e";
#else
const char* estr_minimap			= _CXR("Minimap");
#endif

///////////////////////////
#ifdef _USING_CXR
const char* estr_enemy_tags			= "\x81\x87\x83\x85\x8f\x87\x8c\x8e\x83\x80\x8a\x80\x8c\x83\x8a\x89\x85\x82\x8e\x8b\x80\x87";
#else
const char* estr_enemy_tags			= _CXR("Enemy_tags");
#endif

///////////////////////////
#ifdef _USING_CXR
const char* estr_weapons_unlock		= "\x83\x80\x88\x80\x8e\x81\x8e\x8b\x8f\x84\x8e\x82\x82\x81\x8b\x83\x8d\x84\x87\x8a\x8d\x89\x82\x8c\x86\x87\x8e\x8c\x8a\x86";
#else
const char* estr_weapons_unlock		= _CXR("Weapons_Unlock");
#endif

///////////////////////////
#ifdef _USING_CXR
const char* estr_view_dist			= "\x81\x89\x82\x82\x87\x86\x82\x8b\x86\x87\x8b\x81\x85\x82\x85\x89\x8b\x86\x8c\x87";
#else
const char* estr_view_dist			= _CXR("View_Dist");
#endif

///////////////////////////
#ifdef _USING_CXR
const char* estr_tags_dist			= "\x88\x8e\x8b\x85\x8c\x8b\x8d\x8e\x87\x80\x8c\x89\x81\x83\x85\x84\x80\x83\x81\x81";
#else
const char* estr_tags_dist			= _CXR("Tags_Dist");
#endif

///////////////////////////
#ifdef _USING_CXR
const char* estr_force_commander	= "\x85\x80\x87\x83\x8f\x8e\x84\x8f\x88\x83\x8b\x87\x8e\x83\x86\x86\x85\x8e\x8e\x8e\x8f\x85\x85\x8a\x88\x87\x8e\x86\x84\x85\x8d\x87";
#else
const char* estr_force_commander	= _CXR("Commander_Force");
#endif

///////////////////////////
#ifdef _USING_CXR
const char* estr_team_switch		= "\x84\x8a\x8e\x87\x8f\x88\x86\x8d\x88\x89\x85\x81\x87\x85\x85\x88\x8b\x84\x87\x80\x84\x86\x88\x8f";
#else
const char* estr_team_switch		= _CXR("Team_Switch");
#endif

///////////////////////////
#ifdef _USING_CXR
const char* estr_no_postproduction	= "\x89\x8e\x8f\x84\x86\x8b\x81\x85\x80\x8b\x8e\x8b\x8a\x8b\x81\x86\x8f\x83\x8f\x88\x85\x88\x82\x80\x80\x8e\x82\x8a\x81\x89\x8b\x8a\x8d\x81\x8a\x87";
#else
const char* estr_no_postproduction	= _CXR("No_PostProduction");
#endif

///////////////////////////
#ifdef _USING_CXR
const char* estr_chams				= "\x85\x8c\x8d\x85\x81\x81\x87\x8f\x88\x82\x88\x8f";
#else
const char* estr_chams				= _CXR("Chams");
#endif

///////////////////////////
#ifdef _USING_CXR
const char* estr_nofog				= "\x89\x83\x8b\x83\x88\x82\x81\x83\x89\x8e\x83\x82\x8b\x8e";
#else
const char* estr_nofog				= _CXR("No_Fog");
#endif

///////////////////////////
#ifdef _USING_CXR
const char* estr_nosky				= "\x8a\x85\x8c\x85\x8c\x86\x82\x81\x80\x83\x88\x8e\x8e\x80";
#else
const char* estr_nosky				= _CXR("No_Sky");
#endif

///////////////////////////
#ifdef _USING_CXR
const char* estr_aimbot				= "\x8f\x8a\x82\x88\x81\x87\x8c\x82\x84\x89\x8d\x86\x86\x86";
#else
const char* estr_aimbot				= _CXR("Aimbot");
#endif

///////////////////////////
#ifdef _USING_CXR
const char* estr_screenshot			= "\x8a\x8c\x85\x84\x87\x8d\x85\x89\x8b\x8e\x8a\x8a\x89\x8b\x80\x82\x81\x81\x8a\x82\x81\x83";
#else
const char* estr_screenshot			= _CXR("Screenshot");
#endif


///////////////////////////
#ifdef _USING_CXR
const char* estr_zoom				= "\x83\x87\x8a\x83\x84\x8d\x8f\x88\x8a\x8f";
#else
const char* estr_zoom				= _CXR("Zoom");
#endif

///////////////////////////
#ifdef _USING_CXR
//const char* estr_nostatic			= "\x84\x81\x83\x8e\x8f\x8d\x8c\x80\x84\x85\x84\x8b\x89\x86\x86\x87\x87\x88\x88\x84";
#else
//const char* estr_nostatic			= _CXR("No_Static");
#endif

///////////////////////////
#ifdef _USING_CXR
const char* estr_console_unlock		= "\x8c\x82\x82\x8f\x8b\x8d\x86\x85\x8e\x8f\x80\x8c\x81\x8b\x80\x8a\x86\x81\x82\x83\x82\x82\x82\x8f\x86\x88\x82\x8f\x84\x8c";
#else
const char* estr_console_unlock		= _CXR("Console_Unlock");
#endif

///////////////////////////
#ifdef _USING_CXR
const char* estr_norecoil			= "\x85\x80\x87\x8e\x8c\x86\x89\x8e\x81\x8f\x8c\x89\x84\x8e\x8b\x89\x85\x84\x85\x85";
#else
const char* estr_norecoil			= _CXR("No_Recoil");
#endif

///////////////////////////
#ifdef _USING_CXR
const char* estr_nodeviation		= "\x8a\x83\x85\x81\x89\x89\x8e\x8b\x86\x8e\x86\x86\x83\x80\x87\x8d\x88\x83\x81\x88\x8c\x89\x88\x84\x8d\x8a";
#else
const char* estr_nodeviation		= _CXR("No_Deviation");
#endif



/////////////////////////////////////////////////////////////
// CXR-generated decoder follows

#include <algorithm>
const char * __pCXRPassword = "(_*_)PB";
const int __iCXRDecBase1 = 128;
const int __iCXRDecBase2 = 128;

class CCXR
{
protected:
   CCXR(const BYTE *key, unsigned int ks)
   {
      int i;BYTE rs;unsigned kp;
      for(i=0;i<256;i++)c[i]=i;kp=0;rs=0;for(i=255;i;i--)std::swap(c[i],c[kr(i,key,ks,&rs,&kp)]);r2=c[1];r1=c[3];av=c[5];lp=c[7];lc=c[rs];rs=0;kp=0;
   }
	inline void SC(){BYTE st=c[lc];r1+=c[r2++];c[lc]=c[r1];c[r1]=c[lp];c[lp]=c[r2];c[r2]=st;av+=c[st];}
	BYTE c[256],r2,r1,av,lp,lc;    

   BYTE kr(unsigned int lm, const BYTE *uk, BYTE ks, BYTE *rs, unsigned *kp)
   {
      unsigned rl=0,mk=1,u;while(mk<lm)mk=(mk<<1)+1;do{*rs=c[*rs]+uk[(*kp)++];if(*kp>=ks){*kp=0;*rs+=ks;}u=mk&*rs;if(++rl>11)u%=lm;}while(u>lm);return u;
   }
};
struct CXRD:CCXR
{
	CXRD(const BYTE *userKey, unsigned int keyLength=16) : CCXR(userKey, keyLength) {}
	inline BYTE pb(BYTE b){SC();lp=b^c[(c[r1]+c[r2])&0xFF]^c[c[(c[lp]+c[lc]+c[av])&0xFF]];lc=b;return lp;}
};
string __CXRDecrypt(const char *pIn)
{
   string x;char b[3];b[2]=0;
   unsigned int i = 0;
   CXRD sap((const BYTE*)__pCXRPassword, (unsigned int) strlen(__pCXRPassword));
   int iLen = (unsigned int) strlen(pIn);
   if (iLen > 2)
   {
      unsigned int ibl= (unsigned int) strlen(pIn);
      if (ibl&0x01)
      {
         assert(!"Illegal string length in Decrypt");
      }
      ibl/=2;
      for (i=0;i<ibl;i++)
      {
         int b1 =pIn[i*2]-__iCXRDecBase1;int b2=pIn[i*2+1]-__iCXRDecBase2;
         int c = (b1 << 4) | b2; char ch =(char)(sap.pb((BYTE)(c)));
         if (i>0) x+=ch;
      }
   }
   return x;
}

int __CXRDecrypt(string* x, const char *pIn)
{
   char b[3];b[2]=0;
   unsigned int i = 0;
   CXRD sap((const BYTE*)__pCXRPassword, (unsigned int) strlen(__pCXRPassword));
   int iLen = (unsigned int) strlen(pIn);
   if (iLen > 2)
   {
      unsigned int ibl= (unsigned int) strlen(pIn);
      if (ibl&0x01)
      {
         assert(!"Illegal string length in Decrypt");
		  return 0;
      }
      ibl/=2;
      for (i=0;i<ibl;i++)
      {
         int b1 =pIn[i*2]-__iCXRDecBase1;int b2=pIn[i*2+1]-__iCXRDecBase2;
         int c = (b1 << 4) | b2; char ch =(char)(sap.pb((BYTE)(c)));
         if (i>0) *x+=ch;
      }
   }
   return 1;
}

